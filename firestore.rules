rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Helper function to get user's group ID
    function getUserGroupId() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.groupId;
    }

    // Helper function to check if user is a member of a specific group
    function isMemberOfGroup(groupId) {
      return isAuthenticated() &&
             exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.groupId == groupId;
    }

    // Users collection rules
    match /users/{userId} {
      // Users can read and write their own document
      allow read, write: if isAuthenticated() && request.auth.uid == userId;

      // Users can read other users in the same group
      allow read: if isAuthenticated() &&
                     resource.data.groupId == getUserGroupId();
    }

    // Groups collection rules
    match /groups/{groupId} {
      // Allow read if user is a member of this group
      allow read: if isMemberOfGroup(groupId);

      // Allow write if user is a member of this group
      allow write: if isMemberOfGroup(groupId);

      // Allow creation of new groups
      allow create: if isAuthenticated() &&
                       request.auth.uid in request.resource.data.members;
    }

    // Calendar data collection (if needed for individual user data)
    match /calendarData/{userId} {
      allow read, write: if isAuthenticated() && request.auth.uid == userId;
    }

    // Deny all other access by default
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
